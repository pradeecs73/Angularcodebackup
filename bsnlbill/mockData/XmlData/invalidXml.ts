/*
* @license
* Copyright (C) Siemens AG 2020-2021 ALL RIGHTS RESERVED.
* Confidential.
*/
export const invalidXml = {
    invalidXml : 'data:text/xml;base64,<?xml version="1.0" encoding="utf-8"?>
<UANodeSet LastModified="2022-06-03T12:53:48.917Z" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://opcfoundation.org/UA/2011/03/UANodeSet.xsd" xmlns:uax="http://opcfoundation.org/UA/2008/02/Types.xsd" xmlns:si="http://www.siemens.com/OPCUA/2017/SimaticNodeSetExtensions" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:s1="http://opcfoundation.org/UA/QoS/Types.xsd" xmlns:ua="http://unifiedautomation.com/Configuration/NodeSet.xsd" xmlns:s2="http://opcfoundation.org/UA/QoS/Types.xsd" xmlns:s3="http://opcfoundation.org/UA/DI/Types.xsd">
    <NamespaceUris>
        <Uri>http://siemens.com/plantobjects</Uri>
        <Uri>http://siemens.com/MyMachine1</Uri>
        <Uri>http://siemens.com/MyMachine2</Uri>
        <Uri>http://siemens.com/MyMachine11</Uri>
    </NamespaceUris>
    <Models>
                    <RequiredModel ModelUri="http://opcfoundation.org/UA/" PublicationDate="2019-05-01T00:00:00Z" Version="1.05" />
        </Model>
        <Model ModelUri="http://siemens.com/MyMachine1" PublicationDate="2021-11-25T00:00:00Z" Version="1.00">
            <RequiredModel ModelUri="http://opcfoundation.org/UA/" PublicationDate="2019-05-01T00:00:00Z" Version="1.05" />
            <RequiredModel ModelUri="http://siemens.com/plantobjects" PublicationDate="2021-06-09T00:00:00Z" Version="1.00" />
        </Model>
        <Model ModelUri="http://siemens.com/MyMachine2" PublicationDate="2021-11-25T00:00:00Z" Version="1.00">
            <RequiredModel ModelUri="http://opcfoundation.org/UA/" PublicationDate="2019-05-01T00:00:00Z" Version="1.05" />
        </Model>
        <Model ModelUri="http://siemens.com/MyMachine11" PublicationDate="2021-11-25T00:00:00Z" Version="1.00">
            <RequiredModel ModelUri="http://opcfoundation.org/UA/" PublicationDate="2019-05-01T00:00:00Z" Version="1.05" />
            <RequiredModel ModelUri="http://siemens.com/plantobjects" PublicationDate="2021-06-09T00:00:00Z" Version="1.00" />
        </Model>
    </Models>
    <Aliases>
        <Alias Alias="Boolean">i=1</Alias>
        <Alias Alias="DateTime">i=13</Alias>
        <Alias Alias="String">i=12</Alias>
        <Alias Alias="LocalizedText">i=21</Alias>
        <Alias Alias="HasComponent">i=47</Alias>
        <Alias Alias="HasProperty">i=46</Alias>
        <Alias Alias="Organizes">i=35</Alias>
        <Alias Alias="HasSubtype">i=45</Alias>
        <Alias Alias="HasTypeDefinition">i=40</Alias>
        <Alias Alias="HasModellingRule">i=37</Alias>
        <Alias Alias="HasEncoding">i=38</Alias>
        <Alias Alias="RolePermissionType">i=96</Alias>
        <Alias Alias="IdType">i=256</Alias>
        <Alias Alias="NumericRange">i=291</Alias>
        <Alias Alias="Argument">i=296</Alias>
        <Alias Alias="HasInterface">i=17603</Alias>
    </Aliases>
    <Extensions>
        <Extension>
            <si:Generator Product="SiOME" Edition="Standard" Version="2.0.4" />
        </Extension>
        <Extension>
            <si:GeneratorExtension Hash="ffb79794f7e2053ce79066aa63b1e2d4"></si:GeneratorExtension>
        </Extension>
    </Extensions>
    <UAObject SymbolicName="http___siemens_com_plantobjects" NodeId="ns=1;i=5000" BrowseName="1:http://siemens.com/plantobjects">
        <DisplayName>http://siemens.com/plantobjects</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">i=11715</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=11616</Reference>
        </References>
    </UAObject>
    <UAVariable DataType="Boolean" NodeId="ns=1;i=6000" BrowseName="IsNamespaceSubset" ParentNodeId="ns=1;i=5000">
        <DisplayName>IsNamespaceSubset</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="DateTime" NodeId="ns=1;i=6001" BrowseName="NamespacePublicationDate" ParentNodeId="ns=1;i=5000">
        <DisplayName>NamespacePublicationDate</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
        <Value>
            <uax:DateTime>2021-06-09T00:00:00Z</uax:DateTime>
        </Value>
    </UAVariable>
    <UAVariable DataType="String" NodeId="ns=1;i=6002" BrowseName="NamespaceUri" ParentNodeId="ns=1;i=5000">
        <DisplayName>NamespaceUri</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
        <Value>
            <uax:String>http://siemens.com/plantobjects</uax:String>
        </Value>
    </UAVariable>
    <UAVariable DataType="String" NodeId="ns=1;i=6003" BrowseName="NamespaceVersion" ParentNodeId="ns=1;i=5000">
        <DisplayName>NamespaceVersion</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
        <Value>
            <uax:String>1.00</uax:String>
        </Value>
    </UAVariable>
    <UAVariable DataType="IdType" ValueRank="1" NodeId="ns=1;i=6004" ArrayDimensions="0" BrowseName="StaticNodeIdTypes" ParentNodeId="ns=1;i=5000">
        <DisplayName>StaticNodeIdTypes</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="NumericRange" ValueRank="1" NodeId="ns=1;i=6005" ArrayDimensions="0" BrowseName="StaticNumericNodeIdRange" ParentNodeId="ns=1;i=5000">
        <DisplayName>StaticNumericNodeIdRange</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="String" NodeId="ns=1;i=6006" BrowseName="StaticStringNodeIdPattern" ParentNodeId="ns=1;i=5000">
        <DisplayName>StaticStringNodeIdPattern</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="RolePermissionType" ValueRank="1" NodeId="ns=1;i=6007" ArrayDimensions="0" BrowseName="DefaultRolePermissions" ParentNodeId="ns=1;i=5000">
        <DisplayName>DefaultRolePermissions</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    </UAVariable>
    <UAObjectType NodeId="ns=1;i=1000" BrowseName="1:PlantObjectRootType">
        <DisplayName>PlantObjectRootType</DisplayName>
        <References>
            <Reference ReferenceType="HasSubtype" IsForward="false">i=61</Reference>
        </References>
    </UAObjectType>
    <UAObjectType NodeId="ns=1;i=1001" BrowseName="1:AutomationComponentType">
        <DisplayName>AutomationComponentType</DisplayName>
        <References>
            <Reference ReferenceType="HasSubtype" IsForward="false">i=58</Reference>
        </References>
    </UAObjectType>
    <UAReferenceType NodeId="ns=1;i=4000" BrowseName="1:HasAutomationComponent">
        <DisplayName>HasAutomationComponent</DisplayName>
        <References>
            <Reference ReferenceType="HasSubtype" IsForward="false">i=47</Reference>
        </References>
        <InverseName>AutomationComponentOf</InverseName>
    </UAReferenceType>
    <UAReferenceType NodeId="ns=1;i=4001" BrowseName="1:HasInputGroup">
        <DisplayName>HasInputGroup</DisplayName>
        <References>
            <Reference ReferenceType="HasSubtype" IsForward="false">i=47</Reference>
        </References>
        <InverseName>InputGroupOf</InverseName>
    </UAReferenceType>
    <UAReferenceType NodeId="ns=1;i=4002" BrowseName="1:HasOutputGroup">
        <DisplayName>HasOutputGroup</DisplayName>
        <References>
            <Reference ReferenceType="HasSubtype" IsForward="false">i=47</Reference>
        </References>
        <InverseName>OutputGrouOf</InverseName>
    </UAReferenceType>
    <UAObject NodeId="ns=1;i=5003" BrowseName="1:FunctionalEntities">
        <DisplayName>FunctionalEntities</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=1001</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=61</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
    </UAObject>
    <UAObject NodeId="ns=1;i=5005" BrowseName="1:PlantObjectRoot">
        <DisplayName>PlantObjectRoot</DisplayName>
        <References>
            <Reference ReferenceType="Organizes" IsForward="false">i=85</Reference>
            <Reference ReferenceType="HasTypeDefinition">ns=1;i=1000</Reference>
        </References>
    </UAObject>
    <UAObject SymbolicName="S_AutomationComponent_" NodeId="ns=1;i=5006" BrowseName="1:&lt;AutomationComponent&gt;">
        <DisplayName>&lt;AutomationComponent&gt;</DisplayName>
        <References>
            <Reference ReferenceType="ns=1;i=4000" IsForward="false">ns=1;i=1000</Reference>
            <Reference ReferenceType="HasTypeDefinition">ns=1;i=1001</Reference>
            <Reference ReferenceType="HasModellingRule">i=11508</Reference>
        </References>
    </UAObject>
    <UAObjectType IsAbstract="true" NodeId="ns=1;i=1015" BrowseName="1:IFunctionalEntityType">
        <DisplayName>IFunctionalEntityType</DisplayName>
        <References>
            <Reference ReferenceType="HasSubtype" IsForward="false">i=17602</Reference>
        </References>
    </UAObjectType>
    <UAMethod NodeId="ns=1;i=7002" BrowseName="1:CloseConnection">
        <DisplayName>CloseConnection</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=1015</Reference>
            <Reference ReferenceType="HasModellingRule">i=80</Reference>
        </References>
    </UAMethod>
    <UAMethod NodeId="ns=1;i=7004" BrowseName="1:EstablishConnection">
        <DisplayName>EstablishConnection</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=1015</Reference>
            <Reference ReferenceType="HasModellingRule">i=80</Reference>
        </References>
    </UAMethod>
    <UAVariable DataType="Argument" ValueRank="1" NodeId="ns=1;i=6016" ArrayDimensions="1" BrowseName="InputArguments" ParentNodeId="ns=1;i=7004">
        <DisplayName>InputArguments</DisplayName>
        <Description>the definition of the input argument of method 1:IFunctionalEntityType.1:EstablishConnection</Description>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=7004</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
        <Value>
            <uax:ListOfExtensionObject>
                <uax:ExtensionObject>
                    <uax:TypeId>
                        <uax:Identifier>i=297</uax:Identifier>
                    </uax:TypeId>
                    <uax:Body>
                        <uax:Argument>
                            <uax:Name>ConnectionConfiguration</uax:Name>
                            <uax:DataType>
                                <uax:Identifier>ns=1;i=3002</uax:Identifier>
                            </uax:DataType>
                            <uax:ValueRank>-1</uax:ValueRank>
                            <uax:ArrayDimensions />
                            <uax:Description />
                        </uax:Argument>
                    </uax:Body>
                </uax:ExtensionObject>
            </uax:ListOfExtensionObject>
        </Value>
    </UAVariable>
    <UADataType NodeId="ns=1;i=3000" BrowseName="1:ApplicationIdentifierType">
        <DisplayName>ApplicationIdentifierType</DisplayName>
        <References>
            <Reference ReferenceType="HasSubtype" IsForward="false">i=22</Reference>
            <Reference ReferenceType="HasEncoding">ns=1;i=5007</Reference>
            <Reference ReferenceType="HasEncoding">ns=1;i=5008</Reference>
        </References>
        <Definition Name="1:ApplicationIdentifierType">
            <Field DataType="i=12" Name="Name" />
        </Definition>
    </UADataType>
    <UAObject SymbolicName="DefaultBinary" NodeId="ns=1;i=5007" BrowseName="Default Binary">
        <DisplayName>Default Binary</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=76</Reference>
        </References>
    </UAObject>
    <UAObject SymbolicName="DefaultXML" NodeId="ns=1;i=5008" BrowseName="Default XML">
        <DisplayName>Default XML</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=76</Reference>
        </References>
    </UAObject>
    <UADataType NodeId="ns=1;i=3003" BrowseName="1:PlantObjectVersion">
        <DisplayName>PlantObjectVersion</DisplayName>
        <References>
            <Reference ReferenceType="HasSubtype" IsForward="false">i=22</Reference>
            <Reference ReferenceType="HasEncoding">ns=1;i=5013</Reference>
            <Reference ReferenceType="HasEncoding">ns=1;i=5014</Reference>
        </References>
        <Definition Name="1:PlantObjectVersion">
            <Field DataType="i=5" Name="Major" />
            <Field DataType="i=5" Name="Minor" />
            <Field DataType="i=5" Name="Build" />
            <Field DataType="i=5" Name="SubBuild" />
        </Definition>
    </UADataType>
    <UAObject SymbolicName="DefaultBinary" NodeId="ns=1;i=5013" BrowseName="Default Binary">
        <DisplayName>Default Binary</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=76</Reference>
        </References>
    </UAObject>
    <UAObject SymbolicName="DefaultXML" NodeId="ns=1;i=5014" BrowseName="Default XML">
        <DisplayName>Default XML</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=76</Reference>
        </References>
    </UAObject>
    <UAVariable DataType="ns=1;i=3003" NodeId="ns=1;i=6036" BrowseName="1:AuthorAssignedVersion  " ParentNodeId="ns=1;i=1015" SymbolicName="AuthorAssignedVersion__">
        <DisplayName>AuthorAssignedVersion</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=1015</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
            <Reference ReferenceType="HasModellingRule">i=80</Reference>
        </References>
        <Value>
            <uax:ExtensionObject>
                <uax:TypeId>
                    <uax:Identifier>ns=1;i=5014</uax:Identifier>
                </uax:TypeId>
                <uax:Body>
                    <PlantObjectVersion xmlns="http://siemens.com/plantobjects/Types.xsd">
                        <Major>1</Major>
                        <Minor>0</Minor>
                        <Build>0</Build>
                        <SubBuild>0</SubBuild>
                    </PlantObjectVersion>
                </uax:Body>
            </uax:ExtensionObject>
        </Value>
    </UAVariable>
    <UAVariable DataType="ns=1;i=3000" NodeId="ns=1;i=6038" BrowseName="1:ApplicationIdentifier" ParentNodeId="ns=1;i=1015">
        <DisplayName>ApplicationIdentifier</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=1015</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="String" NodeId="ns=1;i=6040" BrowseName="1:AuthorAssignedIdentifier" ParentNodeId="ns=1;i=1015">
        <DisplayName>AuthorAssignedIdentifier</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=1015</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
            <Reference ReferenceType="HasModellingRule">i=80</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="String" NodeId="ns=1;i=6048" BrowseName="1:AuthorUri" ParentNodeId="ns=1;i=1015">
        <DisplayName>AuthorUri</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=1015</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
            <Reference ReferenceType="HasModellingRule">i=80</Reference>
        </References>
    </UAVariable>
    <UADataType NodeId="ns=1;i=3008" BrowseName="1:ConnectionEndpointStatus">
        <DisplayName>ConnectionEndpointStatus</DisplayName>
        <References>
            <Reference ReferenceType="HasSubtype" IsForward="false">i=29</Reference>
        </References>
        <Definition Name="1:ConnectionEndpointStatus">
            <Field DataType="i=24" Name="Initial" Value="0" />
            <Field DataType="i=24" Name="Ready" Value="1" />
            <Field DataType="i=24" Name="PreOperational" Value="2" />
            <Field DataType="i=24" Name="Operational" Value="3" />
            <Field DataType="i=24" Name="Error" Value="4" />
        </Definition>
    </UADataType>
    <UAVariable DataType="LocalizedText" ValueRank="1" NodeId="ns=1;i=6023" ArrayDimensions="5" BrowseName="EnumStrings" ParentNodeId="ns=1;i=3008" UserAccessLevel="3" AccessLevel="3">
        <DisplayName>EnumStrings</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=3008</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
        <Value>
            <uax:ListOfLocalizedText>
                <uax:LocalizedText>
                    <uax:Text>Initial</uax:Text>
                </uax:LocalizedText>
                <uax:LocalizedText>
                    <uax:Text>Ready</uax:Text>
                </uax:LocalizedText>
                <uax:LocalizedText>
                    <uax:Text>PreOperational</uax:Text>
                </uax:LocalizedText>
                <uax:LocalizedText>
                    <uax:Text>Operational</uax:Text>
                </uax:LocalizedText>
                <uax:LocalizedText>
                    <uax:Text>Error</uax:Text>
                </uax:LocalizedText>
            </uax:ListOfLocalizedText>
        </Value>
    </UAVariable>
    <UAObjectType NodeId="ns=1;i=1002" BrowseName="1:ConnectionEndpointsFolderType">
        <DisplayName>ConnectionEndpointsFolderType</DisplayName>
        <References>
            <Reference ReferenceType="HasSubtype" IsForward="false">i=61</Reference>
        </References>
    </UAObjectType>
    <UAVariable NodeId="ns=1;i=6024" BrowseName="1:InputData" ParentNodeId="ns=1;i=1015" UserAccessLevel="3" AccessLevel="3">
        <DisplayName>InputData</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=1015</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
            <Reference ReferenceType="HasModellingRule">i=80</Reference>
        </References>
    </UAVariable>
    <UAVariable NodeId="ns=1;i=6025" BrowseName="1:InputData" ParentNodeId="ns=1;i=1004" UserAccessLevel="3" AccessLevel="3">
        <DisplayName>InputData</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
            <Reference ReferenceType="HasModellingRule">i=80</Reference>
        </References>
    </UAVariable>
    <UAVariable NodeId="ns=1;i=6026" BrowseName="1:OutputData" ParentNodeId="ns=1;i=1015">
        <DisplayName>OutputData</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=1015</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
            <Reference ReferenceType="HasModellingRule">i=80</Reference>
        </References>
    </UAVariable>
    <UAVariable NodeId="ns=1;i=6027" BrowseName="1:OutputData" ParentNodeId="ns=1;i=1004" UserAccessLevel="3" AccessLevel="3">
        <DisplayName>OutputData</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
            <Reference ReferenceType="HasModellingRule">i=80</Reference>
        </References>
    </UAVariable>
    <UAObject NodeId="ns=1;i=5020" BrowseName="1:ConnectionEndpoints">
        <DisplayName>ConnectionEndpoints</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=58</Reference>
            <Reference ReferenceType="HasModellingRule">i=80</Reference>
        </References>
    </UAObject>
    <UAReferenceType NodeId="ns=1;i=4003" BrowseName="1:HasConnectionEndpoint">
        <DisplayName>HasConnectionEndpoint</DisplayName>
        <References>
            <Reference ReferenceType="HasSubtype" IsForward="false">i=47</Reference>
        </References>
        <InverseName>ConnectionEndpointOf</InverseName>
    </UAReferenceType>
    <UAObjectType NodeId="ns=1;i=1003" BrowseName="1:ConnectionEndpointType">
        <DisplayName>ConnectionEndpointType</DisplayName>
        <References>
            <Reference ReferenceType="HasSubtype" IsForward="false">i=58</Reference>
        </References>
    </UAObjectType>
    <UAVariable DataType="ns=1;i=3008" NodeId="ns=1;i=6028" BrowseName="1:Status" ParentNodeId="ns=1;i=1003">
        <DisplayName>Status</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=1003</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
    </UAVariable>
    <UADataType NodeId="ns=1;i=3009" BrowseName="1:RelatedEndpointDataType">
        <DisplayName>RelatedEndpointDataType</DisplayName>
        <References>
            <Reference ReferenceType="HasSubtype" IsForward="false">i=22</Reference>
            <Reference ReferenceType="HasEncoding">ns=1;i=5023</Reference>
            <Reference ReferenceType="HasEncoding">ns=1;i=5024</Reference>
        </References>
        <Definition Name="1:RelatedEndpointDataType">
            <Field DataType="i=12" Name="Address" />
            <Field DataType="i=12" Name="InputNodeId" />
            <Field DataType="i=12" Name="OutputNodeId" />
        </Definition>
    </UADataType>
    <UAObject SymbolicName="DefaultBinary" NodeId="ns=1;i=5023" BrowseName="Default Binary">
        <DisplayName>Default Binary</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=76</Reference>
        </References>
    </UAObject>
    <UAObject SymbolicName="DefaultXML" NodeId="ns=1;i=5024" BrowseName="Default XML">
        <DisplayName>Default XML</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=76</Reference>
        </References>
    </UAObject>
    <UAVariable DataType="ns=1;i=3009" NodeId="ns=1;i=6031" BrowseName="1:RelatedEndpoint" ParentNodeId="ns=1;i=1003">
        <DisplayName>RelatedEndpoint</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=1003</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
    </UAVariable>
    <UAObject SymbolicName="S_ConnectionEndpoint_" NodeId="ns=1;i=5025" BrowseName="1:ConnectionEndpoint">
        <DisplayName>ConnectionEndpoint</DisplayName>
        <References>
            <Reference ReferenceType="ns=1;i=4003" IsForward="false">ns=1;i=1002</Reference>
            <Reference ReferenceType="HasTypeDefinition">ns=1;i=1003</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
    </UAObject>
    <UAVariable DataType="ns=1;i=3009" NodeId="ns=1;i=6011" BrowseName="1:RelatedEndpoint" ParentNodeId="ns=1;i=5025">
        <DisplayName>RelatedEndpoint</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=5025</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="ns=1;i=3008" NodeId="ns=1;i=6012" BrowseName="1:Status" ParentNodeId="ns=1;i=5025">
        <DisplayName>Status</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=5025</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
    </UAVariable>
    <UAObject NodeId="ns=1;i=5017" BrowseName="1:ConnectionEndpoints">
        <DisplayName>ConnectionEndpoints</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=1015</Reference>
            <Reference ReferenceType="HasTypeDefinition">ns=1;i=1002</Reference>
            <Reference ReferenceType="HasModellingRule">i=80</Reference>
        </References>
    </UAObject>
    <UAObject NodeId="ns=1;i=5019" BrowseName="1:ConnectionEndpoint">
        <DisplayName>ConnectionEndpoint</DisplayName>
        <References>
            <Reference ReferenceType="ns=1;i=4003" IsForward="false">ns=1;i=5017</Reference>
            <Reference ReferenceType="HasTypeDefinition">ns=1;i=1003</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
    </UAObject>
    <UAVariable DataType="ns=1;i=3009" NodeId="ns=1;i=6009" BrowseName="1:RelatedEndpoint" ParentNodeId="ns=1;i=5019">
        <DisplayName>RelatedEndpoint</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=5019</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="ns=1;i=3008" NodeId="ns=1;i=6010" BrowseName="1:Status" ParentNodeId="ns=1;i=5019">
        <DisplayName>Status</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=5019</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
    </UAVariable>
    <UAObjectType NodeId="ns=1;i=1004" BrowseName="1:FunctionalEntityType">
        <DisplayName>FunctionalEntityType</DisplayName>
        <References>
            <Reference ReferenceType="HasSubtype" IsForward="false">i=58</Reference>
            <Reference ReferenceType="HasInterface">ns=1;i=1015</Reference>
        </References>
    </UAObjectType>
    <UAVariable DataType="ns=1;i=3000" NodeId="ns=1;i=6008" BrowseName="1:ApplicationIdentifier" ParentNodeId="ns=1;i=1004">
        <DisplayName>ApplicationIdentifier</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=1004</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="String" NodeId="ns=1;i=6013" BrowseName="1:AuthorAssignedIdentifier" ParentNodeId="ns=1;i=1004">
        <DisplayName>AuthorAssignedIdentifier</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=1004</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
            <Reference ReferenceType="HasModellingRule">i=80</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="ns=1;i=3003" NodeId="ns=1;i=6018" BrowseName="1:AuthorAssignedVersion  " ParentNodeId="ns=1;i=1004" SymbolicName="AuthorAssignedVersion__">
        <DisplayName>AuthorAssignedVersion</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=1004</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
            <Reference ReferenceType="HasModellingRule">i=80</Reference>
        </References>
        <Value>
            <uax:ExtensionObject>
                <uax:TypeId>
                    <uax:Identifier>ns=1;i=5014</uax:Identifier>
                </uax:TypeId>
                <uax:Body>
                    <PlantObjectVersion xmlns="http://siemens.com/plantobjects/Types.xsd">
                        <Major>1</Major>
                        <Minor>0</Minor>
                        <Build>0</Build>
                        <SubBuild>0</SubBuild>
                    </PlantObjectVersion>
                </uax:Body>
            </uax:ExtensionObject>
        </Value>
    </UAVariable>
    <UAVariable DataType="String" NodeId="ns=1;i=6019" BrowseName="1:AuthorUri" ParentNodeId="ns=1;i=1004">
        <DisplayName>AuthorUri</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=1004</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
            <Reference ReferenceType="HasModellingRule">i=80</Reference>
        </References>
    </UAVariable>
    <UAMethod NodeId="ns=1;i=7000" BrowseName="1:CloseConnection">
        <DisplayName>CloseConnection</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=1004</Reference>
            <Reference ReferenceType="HasModellingRule">i=80</Reference>
        </References>
    </UAMethod>
    <UAObject NodeId="ns=1;i=5004" BrowseName="1:ConnectionEndpoints">
        <DisplayName>ConnectionEndpoints</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=1004</Reference>
            <Reference ReferenceType="HasTypeDefinition">ns=1;i=1002</Reference>
            <Reference ReferenceType="HasModellingRule">i=80</Reference>
        </References>
    </UAObject>
    <UAVariable NodeId="ns=1;i=6020" BrowseName="1:InputData" ParentNodeId="ns=1;i=1004" UserAccessLevel="3" AccessLevel="3">
        <DisplayName>InputData</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=1004</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
            <Reference ReferenceType="HasModellingRule">i=80</Reference>
        </References>
    </UAVariable>
    <UAVariable NodeId="ns=1;i=6021" BrowseName="1:OutputData" ParentNodeId="ns=1;i=1004">
        <DisplayName>OutputData</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=1004</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
            <Reference ReferenceType="HasModellingRule">i=80</Reference>
        </References>
    </UAVariable>
    <UAObject NodeId="ns=1;i=5018" BrowseName="1:ConnectionEndpoint">
        <DisplayName>ConnectionEndpoint</DisplayName>
        <References>
            <Reference ReferenceType="ns=1;i=4003" IsForward="false">ns=1;i=5004</Reference>
            <Reference ReferenceType="HasTypeDefinition">ns=1;i=1003</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
    </UAObject>
    <UAVariable DataType="ns=1;i=3009" NodeId="ns=1;i=6033" BrowseName="1:RelatedEndpoint" ParentNodeId="ns=1;i=5018">
        <DisplayName>RelatedEndpoint</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=5018</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="ns=1;i=3008" NodeId="ns=1;i=6034" BrowseName="1:Status" ParentNodeId="ns=1;i=5018">
        <DisplayName>Status</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=5018</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
    </UAVariable>
    <UAObject SymbolicName="S_FunctionalEntity_" NodeId="ns=1;i=5021" BrowseName="1:&lt;FunctionalEntity&gt;">
        <DisplayName>&lt;FunctionalEntity&gt;</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=5003</Reference>
            <Reference ReferenceType="HasTypeDefinition">ns=1;i=1004</Reference>
            <Reference ReferenceType="HasModellingRule">i=11508</Reference>
        </References>
    </UAObject>
    <UAVariable DataType="ns=1;i=3001" NodeId="ns=1;i=6044" BrowseName="1:DetailedStatus" ParentNodeId="ns=1;i=1003">
        <DisplayName>DetailedStatus</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=1003</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="ns=1;i=3001" NodeId="ns=1;i=6045" BrowseName="1:DetailedStatus" ParentNodeId="ns=1;i=5018">
        <DisplayName>DetailedStatus</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=5018</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="ns=1;i=3001" NodeId="ns=1;i=6046" BrowseName="1:DetailedStatus" ParentNodeId="ns=1;i=5019">
        <DisplayName>DetailedStatus</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=5019</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
    </UAVariable>
    <UADataType NodeId="ns=1;i=3001" BrowseName="1:ConnectionEndpointStatusDetails">
        <DisplayName>ConnectionEndpointStatusDetails</DisplayName>
        <References>
            <Reference ReferenceType="HasSubtype" IsForward="false">i=22</Reference>
            <Reference ReferenceType="HasEncoding">ns=1;i=5009</Reference>
            <Reference ReferenceType="HasEncoding">ns=1;i=5010</Reference>
        </References>
        <Definition Name="1:ConnectionEndpointStatusDetails">
            <Field DataType="i=7" Name="Connect">
                <Description>Error which occured during OPC UA connect</Description>
            </Field>
            <Field DataType="i=7" Name="ReadNamespaceList">
                <Description>Error which occured during reading the namespaces</Description>
            </Field>
            <Field DataType="i=7" Name="ReadNodeIds" />
            <Field DataType="i=7" Name="Read" />
            <Field DataType="i=7" Name="Write" />
            <Field DataType="i=7" Name="Disconnect" />
        </Definition>
    </UADataType>
    <UAObject SymbolicName="DefaultBinary" NodeId="ns=1;i=5009" BrowseName="Default Binary">
        <DisplayName>Default Binary</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=76</Reference>
        </References>
    </UAObject>
    <UAObject SymbolicName="DefaultXML" NodeId="ns=1;i=5010" BrowseName="Default XML">
        <DisplayName>Default XML</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=76</Reference>
        </References>
    </UAObject>
    <UADataType NodeId="ns=1;i=3002" BrowseName="1:ConnectionConfigurationType">
        <DisplayName>ConnectionConfigurationType</DisplayName>
        <References>
            <Reference ReferenceType="HasSubtype" IsForward="false">i=22</Reference>
            <Reference ReferenceType="HasEncoding">ns=1;i=5011</Reference>
            <Reference ReferenceType="HasEncoding">ns=1;i=5012</Reference>
        </References>
        <Definition Name="1:ConnectionConfigurationType">
            <Field DataType="i=302" Name="SecurityMode" />
            <Field DataType="i=12" Name="SecurityPolicyUri" />
            <Field DataType="i=12" Name="Address" />
            <Field DataType="i=7" Name="CertificateId" />
            <Field DataType="i=12" Name="User" />
            <Field DataType="i=12" Name="Password" />
            <Field DataType="i=12" Name="SessionName" />
            <Field DataType="i=6" Name="SessionTimeout" />
            <Field DataType="i=6" Name="MonitorConnection" />
            <Field DataType="i=12" Name="InputNodeId" />
            <Field DataType="i=12" Name="OutputNodeId" />
        </Definition>
    </UADataType>
    <UAObject SymbolicName="DefaultBinary" NodeId="ns=1;i=5011" BrowseName="Default Binary">
        <DisplayName>Default Binary</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=76</Reference>
        </References>
    </UAObject>
    <UAObject SymbolicName="DefaultXML" NodeId="ns=1;i=5012" BrowseName="Default XML">
        <DisplayName>Default XML</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=76</Reference>
        </References>
    </UAObject>
    <UAMethod NodeId="ns=1;i=7001" BrowseName="1:EstablishConnection">
        <DisplayName>EstablishConnection</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=1;i=1004</Reference>
            <Reference ReferenceType="HasModellingRule">i=80</Reference>
        </References>
    </UAMethod>
    <UAVariable DataType="Argument" ValueRank="1" NodeId="ns=1;i=6030" ArrayDimensions="1" BrowseName="InputArguments" ParentNodeId="ns=1;i=7001">
        <DisplayName>InputArguments</DisplayName>
        <Description>the definition of the input argument of method 1:IFunctionalEntityType.1:EstablishConnection</Description>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=7001</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
        <Value>
            <uax:ListOfExtensionObject>
                <uax:ExtensionObject>
                    <uax:TypeId>
                        <uax:Identifier>i=297</uax:Identifier>
                    </uax:TypeId>
                    <uax:Body>
                        <uax:Argument>
                            <uax:Name>ConnectionConfiguration</uax:Name>
                            <uax:DataType>
                                <uax:Identifier>ns=1;i=3002</uax:Identifier>
                            </uax:DataType>
                            <uax:ValueRank>-1</uax:ValueRank>
                            <uax:ArrayDimensions />
                            <uax:Description />
                        </uax:Argument>
                    </uax:Body>
                </uax:ExtensionObject>
            </uax:ListOfExtensionObject>
        </Value>
    </UAVariable>
    <UAVariable DataType="Argument" ValueRank="1" NodeId="ns=1;i=6014" ArrayDimensions="1" BrowseName="OutputArguments" ParentNodeId="ns=1;i=7004" UserAccessLevel="3" AccessLevel="3">
        <DisplayName>OutputArguments</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=7004</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
        <Value>
            <uax:ListOfExtensionObject>
                <uax:ExtensionObject>
                    <uax:TypeId>
                        <uax:Identifier>i=297</uax:Identifier>
                    </uax:TypeId>
                    <uax:Body>
                        <uax:Argument>
                            <uax:Name>Success</uax:Name>
                            <uax:DataType>
                                <uax:Identifier>i=1</uax:Identifier>
                            </uax:DataType>
                            <uax:ValueRank>-1</uax:ValueRank>
                            <uax:ArrayDimensions />
                            <uax:Description />
                        </uax:Argument>
                    </uax:Body>
                </uax:ExtensionObject>
            </uax:ListOfExtensionObject>
        </Value>
    </UAVariable>
    <UAVariable DataType="Argument" ValueRank="1" NodeId="ns=1;i=6015" ArrayDimensions="1" BrowseName="OutputArguments" ParentNodeId="ns=1;i=7001" UserAccessLevel="3" AccessLevel="3">
        <DisplayName>OutputArguments</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=7001</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
        <Value>
            <uax:ListOfExtensionObject>
                <uax:ExtensionObject>
                    <uax:TypeId>
                        <uax:Identifier>i=297</uax:Identifier>
                    </uax:TypeId>
                    <uax:Body>
                        <uax:Argument>
                            <uax:Name>Success</uax:Name>
                            <uax:DataType>
                                <uax:Identifier>i=1</uax:Identifier>
                            </uax:DataType>
                            <uax:ValueRank>-1</uax:ValueRank>
                            <uax:ArrayDimensions />
                            <uax:Description />
                        </uax:Argument>
                    </uax:Body>
                </uax:ExtensionObject>
            </uax:ListOfExtensionObject>
        </Value>
    </UAVariable>
    <UAVariable DataType="Argument" ValueRank="1" NodeId="ns=1;i=6017" ArrayDimensions="1" BrowseName="OutputArguments" ParentNodeId="ns=1;i=7002" UserAccessLevel="3" AccessLevel="3">
        <DisplayName>OutputArguments</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=7002</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
        <Value>
            <uax:ListOfExtensionObject>
                <uax:ExtensionObject>
                    <uax:TypeId>
                        <uax:Identifier>i=297</uax:Identifier>
                    </uax:TypeId>
                    <uax:Body>
                        <uax:Argument>
                            <uax:Name>Success</uax:Name>
                            <uax:DataType>
                                <uax:Identifier>i=1</uax:Identifier>
                            </uax:DataType>
                            <uax:ValueRank>-1</uax:ValueRank>
                            <uax:ArrayDimensions />
                            <uax:Description />
                        </uax:Argument>
                    </uax:Body>
                </uax:ExtensionObject>
            </uax:ListOfExtensionObject>
        </Value>
    </UAVariable>
    <UAVariable DataType="Argument" ValueRank="1" NodeId="ns=1;i=6022" ArrayDimensions="1" BrowseName="OutputArguments" ParentNodeId="ns=1;i=7000" UserAccessLevel="3" AccessLevel="3">
        <DisplayName>OutputArguments</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=1;i=7000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
            <Reference ReferenceType="HasModellingRule">i=78</Reference>
        </References>
        <Value>
            <uax:ListOfExtensionObject>
                <uax:ExtensionObject>
                    <uax:TypeId>
                        <uax:Identifier>i=297</uax:Identifier>
                    </uax:TypeId>
                    <uax:Body>
                        <uax:Argument>
                            <uax:Name>Success</uax:Name>
                            <uax:DataType>
                                <uax:Identifier>i=1</uax:Identifier>
                            </uax:DataType>
                            <uax:ValueRank>-1</uax:ValueRank>
                            <uax:ArrayDimensions />
                            <uax:Description />
                        </uax:Argument>
                    </uax:Body>
                </uax:ExtensionObject>
            </uax:ListOfExtensionObject>
        </Value>
    </UAVariable>
    <UAObject SymbolicName="http___siemens_com_MyMachine1" NodeId="ns=2;i=5000" BrowseName="2:http://siemens.com/MyMachine1">
        <DisplayName>http://siemens.com/MyMachine1</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">i=11715</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=11616</Reference>
        </References>
    </UAObject>
    <UAVariable DataType="Boolean" NodeId="ns=2;i=6000" BrowseName="IsNamespaceSubset" ParentNodeId="ns=2;i=5000">
        <DisplayName>IsNamespaceSubset</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=2;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="DateTime" NodeId="ns=2;i=6001" BrowseName="NamespacePublicationDate" ParentNodeId="ns=2;i=5000">
        <DisplayName>NamespacePublicationDate</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=2;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
        <Value>
            <uax:DateTime>2021-11-25T00:00:00Z</uax:DateTime>
        </Value>
    </UAVariable>
    <UAVariable DataType="String" NodeId="ns=2;i=6002" BrowseName="NamespaceUri" ParentNodeId="ns=2;i=5000">
        <DisplayName>NamespaceUri</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=2;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
        <Value>
            <uax:String>http://siemens.com/MyMachine1</uax:String>
        </Value>
    </UAVariable>
    <UAVariable DataType="String" NodeId="ns=2;i=6003" BrowseName="NamespaceVersion" ParentNodeId="ns=2;i=5000">
        <DisplayName>NamespaceVersion</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=2;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
        <Value>
            <uax:String>1.00</uax:String>
        </Value>
    </UAVariable>
    <UAVariable DataType="IdType" ValueRank="1" NodeId="ns=2;i=6004" ArrayDimensions="0" BrowseName="StaticNodeIdTypes" ParentNodeId="ns=2;i=5000">
        <DisplayName>StaticNodeIdTypes</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=2;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="NumericRange" ValueRank="1" NodeId="ns=2;i=6005" ArrayDimensions="0" BrowseName="StaticNumericNodeIdRange" ParentNodeId="ns=2;i=5000">
        <DisplayName>StaticNumericNodeIdRange</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=2;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="String" NodeId="ns=2;i=6006" BrowseName="StaticStringNodeIdPattern" ParentNodeId="ns=2;i=5000">
        <DisplayName>StaticStringNodeIdPattern</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=2;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="RolePermissionType" ValueRank="1" NodeId="ns=2;i=6007" ArrayDimensions="0" BrowseName="DefaultRolePermissions" ParentNodeId="ns=2;i=5000">
        <DisplayName>DefaultRolePermissions</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=2;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    </UAVariable>
    <UAObject NodeId="ns=2;i=5001" BrowseName="2:MyMachine1">
        <DisplayName>MyMachine1</DisplayName>
        <References>
            <Reference ReferenceType="ns=1;i=4000" IsForward="false">ns=1;i=5005</Reference>
            <Reference ReferenceType="HasTypeDefinition">ns=1;i=1001</Reference>
        </References>
    </UAObject>
    <UAObject NodeId="ns=2;i=5002" BrowseName="1:FunctionalEntities">
        <DisplayName>FunctionalEntities</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=2;i=5001</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=61</Reference>
        </References>
    </UAObject>
    <UAObject NodeId="ns=2;i=5003" BrowseName="2:MyServerInterface">
        <DisplayName>MyServerInterface</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=2;i=5002</Reference>
            <Reference ReferenceType="HasTypeDefinition">ns=1;i=1004</Reference>
        </References>
    </UAObject>
    <UAVariable DataType="ns=1;i=3000" NodeId="ns=2;i=6008" BrowseName="1:ApplicationIdentifier" ParentNodeId="ns=2;i=5003">
        <DisplayName>ApplicationIdentifier</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=2;i=5003</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    <Extensions>
      <Extension>
        <si:VariableMapping>"MyServerInterface1"."ApplicationIdentifier"</si:VariableMapping>
      </Extension>
    </Extensions>
        <Value>
            <uax:ExtensionObject>
                <uax:TypeId>
                    <uax:Identifier>ns=1;i=5008</uax:Identifier>
                </uax:TypeId>
                <uax:Body>
                    <ApplicationIdentifierType xmlns="http://siemens.com/plantobjects/Types.xsd">
                        <Name>MyMachine1To2</Name>
                    </ApplicationIdentifierType>
                </uax:Body>
            </uax:ExtensionObject>
        </Value>
    </UAVariable>
    <UAVariable DataType="ns=2;i=3001" NodeId="ns=2;i=6009" BrowseName="1:InputData" ParentNodeId="ns=2;i=5003" UserAccessLevel="3" AccessLevel="3">
        <DisplayName>InputData</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=2;i=5003</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
        </References>
    <Extensions>
      <Extension>
        <si:VariableMapping>"MyServerInterface1"."InputData"."variable"</si:VariableMapping>
      </Extension>
    </Extensions>
    </UAVariable>
    <UAVariable DataType="ns=2;i=3000" NodeId="ns=2;i=6010" BrowseName="1:OutputData" ParentNodeId="ns=2;i=5003">
        <DisplayName>OutputData</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=2;i=5003</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
        </References>
    <Extensions>
      <Extension>
        <si:VariableMapping>"MyServerInterface1"."OutputData"."variable"</si:VariableMapping>
      </Extension>
    </Extensions>
    </UAVariable>
    <UADataType NodeId="ns=2;i=3000" BrowseName="2:Machine1OutToMachine2In">
        <DisplayName>Machine1OutToMachine2In</DisplayName>
        <References>
            <Reference ReferenceType="HasSubtype" IsForward="false">i=22</Reference>
            <Reference ReferenceType="HasEncoding">ns=2;i=5004</Reference>
            <Reference ReferenceType="HasEncoding">ns=2;i=5005</Reference>
        </References>
        <Definition Name="2:Machine1OutToMachine2In">
            <Field DataType="i=1" Name="Start" />
            <Field DataType="i=4" Name="Amount" />
            <Field DataType="i=12" Name="Message" />
        </Definition>
    </UADataType>
    <UAObject SymbolicName="DefaultBinary" NodeId="ns=2;i=5004" BrowseName="Default Binary">
        <DisplayName>Default Binary</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=76</Reference>
        </References>
    </UAObject>
    <UAObject SymbolicName="DefaultXML" NodeId="ns=2;i=5005" BrowseName="Default XML">
        <DisplayName>Default XML</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=76</Reference>
        </References>
    </UAObject>
    <UADataType NodeId="ns=2;i=3001" BrowseName="2:Machine2OutToMachine1In">
        <DisplayName>Machine2OutToMachine1In</DisplayName>
        <References>
            <Reference ReferenceType="HasSubtype" IsForward="false">i=22</Reference>
            <Reference ReferenceType="HasEncoding">ns=2;i=5006</Reference>
            <Reference ReferenceType="HasEncoding">ns=2;i=5007</Reference>
        </References>
        <Definition Name="2:Machine2OutToMachine1In">
            <Field DataType="i=1" Name="Started" />
            <Field DataType="i=1" Name="Status" />
            <Field DataType="i=7" Name="ErrorCode" />
        </Definition>
    </UADataType>
    <UAObject SymbolicName="DefaultBinary" NodeId="ns=2;i=5006" BrowseName="Default Binary">
        <DisplayName>Default Binary</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=76</Reference>
        </References>
    </UAObject>
    <UAObject SymbolicName="DefaultXML" NodeId="ns=2;i=5007" BrowseName="Default XML">
        <DisplayName>Default XML</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=76</Reference>
        </References>
    </UAObject>
    <UAObject SymbolicName="http___siemens_com_MyMachine2" NodeId="ns=3;i=5000" BrowseName="3:http://siemens.com/MyMachine2">
        <DisplayName>http://siemens.com/MyMachine2</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">i=11715</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=11616</Reference>
        </References>
    </UAObject>
    <UAVariable DataType="Boolean" NodeId="ns=3;i=6000" BrowseName="IsNamespaceSubset" ParentNodeId="ns=3;i=5000">
        <DisplayName>IsNamespaceSubset</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=3;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="DateTime" NodeId="ns=3;i=6001" BrowseName="NamespacePublicationDate" ParentNodeId="ns=3;i=5000">
        <DisplayName>NamespacePublicationDate</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=3;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
        <Value>
            <uax:DateTime>2021-11-25T00:00:00Z</uax:DateTime>
        </Value>
    </UAVariable>
    <UAVariable DataType="String" NodeId="ns=3;i=6002" BrowseName="NamespaceUri" ParentNodeId="ns=3;i=5000">
        <DisplayName>NamespaceUri</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=3;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
        <Value>
            <uax:String>http://siemens.com/MyMachine2</uax:String>
        </Value>
    </UAVariable>
    <UAVariable DataType="String" NodeId="ns=3;i=6003" BrowseName="NamespaceVersion" ParentNodeId="ns=3;i=5000">
        <DisplayName>NamespaceVersion</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=3;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
        <Value>
            <uax:String>1.00</uax:String>
        </Value>
    </UAVariable>
    <UAVariable DataType="IdType" ValueRank="1" NodeId="ns=3;i=6004" ArrayDimensions="0" BrowseName="StaticNodeIdTypes" ParentNodeId="ns=3;i=5000">
        <DisplayName>StaticNodeIdTypes</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=3;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="NumericRange" ValueRank="1" NodeId="ns=3;i=6005" ArrayDimensions="0" BrowseName="StaticNumericNodeIdRange" ParentNodeId="ns=3;i=5000">
        <DisplayName>StaticNumericNodeIdRange</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=3;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="String" NodeId="ns=3;i=6006" BrowseName="StaticStringNodeIdPattern" ParentNodeId="ns=3;i=5000">
        <DisplayName>StaticStringNodeIdPattern</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=3;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="RolePermissionType" ValueRank="1" NodeId="ns=3;i=6007" ArrayDimensions="0" BrowseName="DefaultRolePermissions" ParentNodeId="ns=3;i=5000">
        <DisplayName>DefaultRolePermissions</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=3;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    </UAVariable>
    <UAObject SymbolicName="http___siemens_com_MyMachine11" NodeId="ns=4;i=5000" BrowseName="4:http://siemens.com/MyMachine11">
        <DisplayName>http://siemens.com/MyMachine11</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">i=11715</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=11616</Reference>
        </References>
    </UAObject>
    <UAVariable DataType="Boolean" NodeId="ns=4;i=6000" BrowseName="IsNamespaceSubset" ParentNodeId="ns=4;i=5000">
        <DisplayName>IsNamespaceSubset</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=4;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="DateTime" NodeId="ns=4;i=6001" BrowseName="NamespacePublicationDate" ParentNodeId="ns=4;i=5000">
        <DisplayName>NamespacePublicationDate</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=4;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
        <Value>
            <uax:DateTime>2021-11-25T00:00:00Z</uax:DateTime>
        </Value>
    </UAVariable>
    <UAVariable DataType="String" NodeId="ns=4;i=6002" BrowseName="NamespaceUri" ParentNodeId="ns=4;i=5000">
        <DisplayName>NamespaceUri</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=4;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
        <Value>
            <uax:String>http://siemens.com/MyMachine11</uax:String>
        </Value>
    </UAVariable>
    <UAVariable DataType="String" NodeId="ns=4;i=6003" BrowseName="NamespaceVersion" ParentNodeId="ns=4;i=5000">
        <DisplayName>NamespaceVersion</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=4;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
        <Value>
            <uax:String>1.00</uax:String>
        </Value>
    </UAVariable>
    <UAVariable DataType="IdType" ValueRank="1" NodeId="ns=4;i=6004" ArrayDimensions="0" BrowseName="StaticNodeIdTypes" ParentNodeId="ns=4;i=5000">
        <DisplayName>StaticNodeIdTypes</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=4;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="NumericRange" ValueRank="1" NodeId="ns=4;i=6005" ArrayDimensions="0" BrowseName="StaticNumericNodeIdRange" ParentNodeId="ns=4;i=5000">
        <DisplayName>StaticNumericNodeIdRange</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=4;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="String" NodeId="ns=4;i=6006" BrowseName="StaticStringNodeIdPattern" ParentNodeId="ns=4;i=5000">
        <DisplayName>StaticStringNodeIdPattern</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=4;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    </UAVariable>
    <UAVariable DataType="RolePermissionType" ValueRank="1" NodeId="ns=4;i=6007" ArrayDimensions="0" BrowseName="DefaultRolePermissions" ParentNodeId="ns=4;i=5000">
        <DisplayName>DefaultRolePermissions</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=4;i=5000</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    </UAVariable>
    <UAObject NodeId="ns=4;i=5001" BrowseName="4:MyMachine11">
        <DisplayName>MyMachine11</DisplayName>
        <References>
            <Reference ReferenceType="ns=1;i=4000" IsForward="false">ns=1;i=5005</Reference>
            <Reference ReferenceType="HasTypeDefinition">ns=1;i=1001</Reference>
        </References>
    </UAObject>
    <UAObject NodeId="ns=4;i=5002" BrowseName="1:FunctionalEntities">
        <DisplayName>FunctionalEntities</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=4;i=5001</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=61</Reference>
        </References>
    </UAObject>
    <UAObject NodeId="ns=4;i=5003" BrowseName="4:MyServerInterface11">
        <DisplayName>MyServerInterface11</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=4;i=5002</Reference>
            <Reference ReferenceType="HasTypeDefinition">ns=1;i=1004</Reference>
        </References>
    </UAObject>
    <UAVariable DataType="ns=1;i=3000" NodeId="ns=4;i=6008" BrowseName="1:ApplicationIdentifier" ParentNodeId="ns=4;i=5003">
        <DisplayName>ApplicationIdentifier</DisplayName>
        <References>
            <Reference ReferenceType="HasProperty" IsForward="false">ns=4;i=5003</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=68</Reference>
        </References>
    <Extensions>
      <Extension>
        <si:VariableMapping>"MyServerInterface2"."ApplicationIdentifier"</si:VariableMapping>
      </Extension>
    </Extensions>
        <Value>
            <uax:ExtensionObject>
                <uax:TypeId>
                    <uax:Identifier>ns=1;i=5008</uax:Identifier>
                </uax:TypeId>
                <uax:Body>
                    <ApplicationIdentifierType xmlns="http://siemens.com/plantobjects/Types.xsd">
                        <Name>MyMachine11To21</Name>
                    </ApplicationIdentifierType>
                </uax:Body>
            </uax:ExtensionObject>
        </Value>
    </UAVariable>
    <UAVariable DataType="ns=4;i=3001" NodeId="ns=4;i=6009" BrowseName="1:InputData" ParentNodeId="ns=4;i=5003" UserAccessLevel="3" AccessLevel="3">
        <DisplayName>InputData</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=4;i=5003</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
        </References>
    <Extensions>
      <Extension>
        <si:VariableMapping>"MyServerInterface2"."InputData"."variable"</si:VariableMapping>
      </Extension>
    </Extensions>
    </UAVariable>
    <UAVariable DataType="ns=4;i=3000" NodeId="ns=4;i=6010" BrowseName="1:OutputData" ParentNodeId="ns=4;i=5003">
        <DisplayName>OutputData</DisplayName>
        <References>
            <Reference ReferenceType="HasComponent" IsForward="false">ns=4;i=5003</Reference>
            <Reference ReferenceType="HasTypeDefinition">i=63</Reference>
        </References>
    <Extensions>
      <Extension>
        <si:VariableMapping>"MyServerInterface2"."OutputData"."variable"</si:VariableMapping>
      </Extension>
    </Extensions>
    </UAVariable>
    <UADataType NodeId="ns=4;i=3000" BrowseName="4:Machine11OutToMachine21In">
        <DisplayName>Machine11OutToMachine21In</DisplayName>
        <References>
            <Reference ReferenceType="HasSubtype" IsForward="false">i=22</Reference>
            <Reference ReferenceType="HasEncoding">ns=4;i=5004</Reference>
            <Reference ReferenceType="HasEncoding">ns=4;i=5005</Reference>
        </References>
        <Definition Name="4:Machine11OutToMachine21In">
            <Field DataType="i=1" Name="Start" />
            <Field DataType="i=4" Name="Amount" />
            <Field DataType="i=12" Name="Message" />
        </Definition>
    </UADataType>
    <UAObject SymbolicName="DefaultBinary" NodeId="ns=4;i=5004" BrowseName="Default Binary">
        <DisplayName>Default Binary</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=76</Reference>
        </References>
    </UAObject>
    <UAObject SymbolicName="DefaultXML" NodeId="ns=4;i=5005" BrowseName="Default XML">
        <DisplayName>Default XML</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=76</Reference>
        </References>
    </UAObject>
    <UADataType NodeId="ns=4;i=3001" BrowseName="4:Machine21OutToMachine11In">
        <DisplayName>Machine21OutToMachine11In</DisplayName>
        <References>
            <Reference ReferenceType="HasSubtype" IsForward="false">i=22</Reference>
            <Reference ReferenceType="HasEncoding">ns=4;i=5006</Reference>
            <Reference ReferenceType="HasEncoding">ns=4;i=5007</Reference>
        </References>
        <Definition Name="4:Machine21OutToMachine11In">
            <Field DataType="i=1" Name="Started" />
            <Field DataType="i=1" Name="Status" />
            <Field DataType="i=7" Name="ErrorCode" />
        </Definition>
    </UADataType>
    <UAObject SymbolicName="DefaultBinary" NodeId="ns=4;i=5006" BrowseName="Default Binary">
        <DisplayName>Default Binary</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=76</Reference>
        </References>
    </UAObject>
    <UAObject SymbolicName="DefaultXML" NodeId="ns=4;i=5007" BrowseName="Default XML">
        <DisplayName>Default XML</DisplayName>
        <References>
            <Reference ReferenceType="HasTypeDefinition">i=76</Reference>
        </References>
    </UAObject>
</UANodeSet>'
};
